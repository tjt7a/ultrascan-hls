// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example_example,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=1.250000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.500000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=260,HLS_SYN_LUT=26,HLS_VERSION=2021_2}" *)

module example (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_symbols,
        report_r,
        report_r_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] input_symbols;
output  [250:0] report_r;
output   report_r_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg report_r_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    grp_ultrascan_fu_43_ap_start;
reg    grp_ultrascan_fu_43_ap_ce;
wire    grp_ultrascan_fu_43_ap_done;
wire    grp_ultrascan_fu_43_ap_idle;
wire    grp_ultrascan_fu_43_ap_ready;
wire    grp_ultrascan_fu_43_ap_continue;
wire   [255:0] grp_ultrascan_fu_43_report_r;
wire    grp_ultrascan_fu_43_report_r_ap_vld;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [255:0] tmp_fu_26;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

ultrascan grp_ultrascan_fu_43(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ultrascan_fu_43_ap_start),
    .ap_ce(grp_ultrascan_fu_43_ap_ce),
    .ap_done(grp_ultrascan_fu_43_ap_done),
    .ap_idle(grp_ultrascan_fu_43_ap_idle),
    .ap_ready(grp_ultrascan_fu_43_ap_ready),
    .ap_continue(grp_ultrascan_fu_43_ap_continue),
    .input_symbols(input_symbols),
    .report(grp_ultrascan_fu_43_report_r),
    .report_ap_vld(grp_ultrascan_fu_43_report_r_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (grp_ultrascan_fu_43_report_r_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (grp_ultrascan_fu_43_report_r_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state1) & (grp_ultrascan_fu_43_report_r_ap_vld == 1'b1)))) begin
        tmp_fu_26 <= grp_ultrascan_fu_43_report_r;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_ultrascan_fu_43_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        grp_ultrascan_fu_43_ap_ce = 1'b1;
    end else begin
        grp_ultrascan_fu_43_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_ultrascan_fu_43_ap_start = 1'b1;
    end else begin
        grp_ultrascan_fu_43_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        report_r_ap_vld = 1'b1;
    end else begin
        report_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_ultrascan_fu_43_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign grp_ultrascan_fu_43_ap_continue = 1'b1;

assign report_r = tmp_fu_26[250:0];

endmodule //example
